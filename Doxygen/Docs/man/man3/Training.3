.TH "Training" 3 "Sun Dec 2 2012" "Version 001" "OpenGL Flythrough" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Training \- 
.PP
Class \fBTraining\fP to save the individual training of a gesture\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <training\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTraining\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fB~Training\fP ()"
.br
.RI "\fI\fBDataset\fP destructor, which calls clear\&. \fP"
.ti -1c
.RI "bool \fBloadTraining\fP (ifstream &)"
.br
.RI "\fILoad a training stored in a file\&. \fP"
.ti -1c
.RI "void \fBsave\fP (ofstream &) const "
.br
.RI "\fISave the training into a file for training and recognition\&. \fP"
.ti -1c
.RI "void \fBaddSample\fP (\fBSample\fP *)"
.br
.RI "\fIAdd a new training to the dataset\&. \fP"
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "\fIDelete all samples and clear the buffer\&. \fP"
.ti -1c
.RI "const \fBSample\fP * \fBsampleAt\fP (unsigned int i) const "
.br
.RI "\fIReturns the i-th sample of the training as a constant pointer\&. \fP"
.ti -1c
.RI "\fBSample\fP * \fBsampleAt\fP (unsigned int i)"
.br
.RI "\fIReturns the i-th sample of the training as a pointer\&. \fP"
.ti -1c
.RI "unsigned int \fBsize\fP () const "
.br
.RI "\fINumber of samples in the current training\&. \fP"
.ti -1c
.RI "void \fBsetTimestampFromMidnight\fP (unsigned long ts)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "vector< \fBSample\fP * > \fBsamples\fP"
.br
.ti -1c
.RI "unsigned long \fBtimestamp\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class \fBTraining\fP to save the individual training of a gesture\&. 
.PP
Definition at line 17 of file training\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Training::addSample (\fBSample\fP *sample)"

.PP
Add a new training to the dataset\&. \fBParameters:\fP
.RS 4
\fIsample\fP Add a sample to the training set\&. 
.RE
.PP

.PP
Definition at line 67 of file training\&.cpp\&.
.SS "void Training::clear ()"

.PP
Delete all samples and clear the buffer\&. This method will take care of freeing the memory of each sample in the training set, hence you don't need to free them in your code\&. 
.PP
Definition at line 88 of file training\&.cpp\&.
.SS "bool Training::loadTraining (ifstream &training)"

.PP
Load a training stored in a file\&. \fBParameters:\fP
.RS 4
\fItraining\fP File stream of the contained training 
.RE
.PP

.PP
Definition at line 16 of file training\&.cpp\&.
.SS "const \fBSample\fP* Training::sampleAt (unsigned inti) const\fC [inline]\fP"

.PP
Returns the i-th sample of the training as a constant pointer\&. \fBParameters:\fP
.RS 4
\fIi\fP \fBSample\fP index in the training set 
.RE
.PP

.PP
Definition at line 36 of file training\&.h\&.
.SS "\fBSample\fP* Training::sampleAt (unsigned inti)\fC [inline]\fP"

.PP
Returns the i-th sample of the training as a pointer\&. \fBParameters:\fP
.RS 4
\fIi\fP \fBSample\fP index in the training set 
.RE
.PP

.PP
Definition at line 50 of file training\&.h\&.
.SS "void Training::save (ofstream &out) const"

.PP
Save the training into a file for training and recognition\&. \fBParameters:\fP
.RS 4
\fIout\fP Stream of the destination file 
.RE
.PP

.PP
Definition at line 50 of file training\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OpenGL Flythrough from the source code\&.
