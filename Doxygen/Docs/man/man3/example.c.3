.TH "example.c" 3 "Mon Dec 3 2012" "Version 001" "OpenGL Flythrough" \" -*- nroff -*-
.ad l
.nh
.SH NAME
example.c \- 
.PP
Example using the wiic API\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <wiic\&.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBMAX_WIIMOTES\fP   4"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBhandle_event\fP (struct \fBwiimote_t\fP *wm)"
.br
.RI "\fICallback that handles an event\&. \fP"
.ti -1c
.RI "void \fBhandle_read\fP (struct \fBwiimote_t\fP *wm, \fBbyte\fP *data, unsigned short len)"
.br
.RI "\fICallback that handles a read event\&. \fP"
.ti -1c
.RI "void \fBhandle_ctrl_status\fP (struct \fBwiimote_t\fP *wm)"
.br
.RI "\fICallback that handles a controller status event\&. \fP"
.ti -1c
.RI "void \fBhandle_disconnect\fP (\fBwiimote\fP *wm)"
.br
.RI "\fICallback that handles a disconnection event\&. \fP"
.ti -1c
.RI "void \fBtest\fP (struct \fBwiimote_t\fP *wm, \fBbyte\fP *data, unsigned short len)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char **argv)"
.br
.RI "\fI\fBmain()\fP \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBexiting\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Example using the wiic API\&. 

This file is an example of how to use the wiic library\&. 
.PP
Definition in file \fBexample\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void \fBhandle_ctrl_status\fP (struct \fBwiimote_t\fP *wm)"
.PP
Callback that handles a controller status event\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&. 
.br
\fIattachment\fP Is there an attachment? (1 for yes, 0 for no) 
.br
\fIspeaker\fP Is the speaker enabled? (1 for yes, 0 for no) 
.br
\fIir\fP Is the IR support enabled? (1 for yes, 0 for no) 
.br
\fIled\fP What LEDs are lit\&. 
.br
\fIbattery_level\fP Battery level, between 0\&.0 (0%) and 1\&.0 (100%)\&.
.RE
.PP
This occurs when either the controller status changed or the controller status was requested explicitly by \fBwiic_status()\fP\&.
.PP
One reason the status can change is if the nunchuk was inserted or removed from the expansion port\&. 
.PP
Definition at line 259 of file example\&.c\&.
.SS "void \fBhandle_disconnect\fP (\fBwiimote\fP *wm)"
.PP
Callback that handles a disconnection event\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&.
.RE
.PP
This can happen if the POWER button is pressed, or if the connection is interrupted\&. 
.PP
Definition at line 278 of file example\&.c\&.
.SS "void \fBhandle_event\fP (struct \fBwiimote_t\fP *wm)"
.PP
Callback that handles an event\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&.
.RE
.PP
This function is called automatically by the wiic library when an event occurs on the specified wiimote\&. 
.PP
Definition at line 61 of file example\&.c\&.
.SS "void \fBhandle_read\fP (struct \fBwiimote_t\fP *wm, \fBbyte\fP *data, unsigned shortlen)"
.PP
Callback that handles a read event\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&. 
.br
\fIdata\fP Pointer to the filled data block\&. 
.br
\fIlen\fP Length in bytes of the data block\&.
.RE
.PP
This function is called automatically by the wiic library when the wiimote has returned the full data requested by a previous call to \fBwiic_read_data()\fP\&.
.PP
You can read data on the wiimote, such as Mii data, if you know the offset address and the length\&.
.PP
The \fIdata\fP pointer was specified on the call to \fBwiic_read_data()\fP\&. At the time of this function being called, it is not safe to deallocate this buffer\&. 
.PP
Definition at line 228 of file example\&.c\&.
.SS "int \fBmain\fP (intargc, char **argv)"
.PP
\fBmain()\fP Connect to up to two wiimotes and print any events that occur on either device\&. 
.PP
Definition at line 296 of file example\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OpenGL Flythrough from the source code\&.
