.TH "io_nix.c" 3 "Sat Dec 1 2012" "Version 001" "OpenGL Flythrough" \" -*- nroff -*-
.ad l
.nh
.SH NAME
io_nix.c \- 
.PP
Handles device I/O for *nix\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <bluetooth/bluetooth\&.h>\fP
.br
\fC#include <bluetooth/hci\&.h>\fP
.br
\fC#include <bluetooth/hci_lib\&.h>\fP
.br
\fC#include <bluetooth/l2cap\&.h>\fP
.br
\fC#include 'definitions\&.h'\fP
.br
\fC#include 'wiic_internal\&.h'\fP
.br
\fC#include 'io\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBwiic_find\fP (struct \fBwiimote_t\fP **wm, int max_wiimotes, int timeout)"
.br
.RI "\fIFind a wiimote or wiimotes\&. \fP"
.ti -1c
.RI "int \fBwiic_connect\fP (struct \fBwiimote_t\fP **wm, int wiimotes, int autoreconnect)"
.br
.RI "\fIConnect to a wiimote or wiimotes once an address is known\&. \fP"
.ti -1c
.RI "int \fBwiic_load\fP (struct \fBwiimote_t\fP **wm)"
.br
.RI "\fILoad Wii devices registered in the wiimotes\&.config file\&. \fP"
.ti -1c
.RI "int \fBwiic_connect_single\fP (struct \fBwiimote_t\fP *wm, char *address, int autoreconnect)"
.br
.RI "\fIConnect to a wiimote with a known address\&. \fP"
.ti -1c
.RI "void \fBwiic_disconnect\fP (struct \fBwiimote_t\fP *wm)"
.br
.RI "\fIDisconnect a wiimote\&. \fP"
.ti -1c
.RI "int \fBwiic_io_read\fP (struct \fBwiimote_t\fP *wm)"
.br
.ti -1c
.RI "int \fBwiic_io_write\fP (struct \fBwiimote_t\fP *wm, \fBbyte\fP *buf, int len)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Handles device I/O for *nix\&. 


.PP
Definition in file \fBwiic_r90/src/wiic/io_nix\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "int wiic_connect (struct \fBwiimote_t\fP **wm, intwiimotes, intautoreconnect)"

.PP
Connect to a wiimote or wiimotes once an address is known\&. \fBParameters:\fP
.RS 4
\fIwm\fP An array of \fBwiimote_t\fP structures\&. 
.br
\fIwiimotes\fP The number of wiimote structures in \fIwm\fP\&. 
.br
\fIautoreconnect\fP Re-connects the device in case of unexpected disconnection\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The number of wiimotes that successfully connected\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwiic_find()\fP 
.PP
\fBwiic_connect_single()\fP 
.PP
\fBwiic_disconnect()\fP
.RE
.PP
Connect to a number of wiimotes when the address is already set in the \fBwiimote_t\fP structures\&. These addresses are normally set by the \fBwiic_find()\fP function, but can also be set manually\&. 
.PP
Definition at line 152 of file wiic_r90/src/wiic/io_nix\&.c\&.
.SS "int wiic_connect_single (struct \fBwiimote_t\fP *wm, char *address, intautoreconnect)"

.PP
Connect to a wiimote with a known address\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&. 
.br
\fIaddress\fP The address of the device to connect to\&. If NULL, use the address in the struct set by \fBwiic_find()\fP\&. 
.br
\fIautoreconnect\fP Re-connect to the device in case of unexpected disconnection\&.
.RE
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
Definition at line 239 of file wiic_r90/src/wiic/io_nix\&.c\&.
.SS "void wiic_disconnect (struct \fBwiimote_t\fP *wm)"

.PP
Disconnect a wiimote\&. \fBParameters:\fP
.RS 4
\fIwm\fP Pointer to a \fBwiimote_t\fP structure\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwiic_connect()\fP
.RE
.PP
Note that this will not free the wiimote structure\&. 
.PP
Definition at line 314 of file wiic_r90/src/wiic/io_nix\&.c\&.
.SS "int wiic_find (struct \fBwiimote_t\fP **wm, intmax_wiimotes, inttimeout)"

.PP
Find a wiimote or wiimotes\&. \fBParameters:\fP
.RS 4
\fIwm\fP An array of \fBwiimote_t\fP structures\&. 
.br
\fImax_wiimotes\fP The number of wiimote structures in \fIwm\fP\&. 
.br
\fItimeout\fP The number of seconds before the search times out\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The number of wiimotes found\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
wiimote_connect()
.RE
.PP
This function will only look for wiimote devices\&. 
.br
 When a device is found the address in the structures will be set\&. 
.br
 You can then call wiimote_connect() to connect to the found 
.br
 devices\&. 
.PP
Definition at line 68 of file wiic_r90/src/wiic/io_nix\&.c\&.
.SS "int wiic_load (struct \fBwiimote_t\fP **wm)"

.PP
Load Wii devices registered in the wiimotes\&.config file\&. \fBParameters:\fP
.RS 4
\fIwm\fP An array of \fBwiimote_t\fP structures\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The number of wiimotes successfully loaded\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBwiic_find()\fP 
.PP
\fBwiic_connect()\fP 
.PP
\fBwiic_connect_single()\fP 
.PP
\fBwiic_disconnect()\fP
.RE
.PP
Up to version 0\&.53, it is possible to register the MAC address of your Wii devices\&. This allows to automatically load them, without waiting for any search timeout\&. To register a new device, go to: <HOME_DIR>/\&.wiic/ and edit the file wiimotes\&.config, by adding the MAC address of the device you want to register (one line per MAC address)\&. 
.PP
Definition at line 188 of file wiic_r90/src/wiic/io_nix\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for OpenGL Flythrough from the source code\&.
